# Copyright (C) 2021 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: firefox
version: "137.0a1"
summary: Mozilla Firefox web browser
description:  Firefox is a powerful, extensible web browser with support for modern web application technologies.
confinement: strict
grade: stable
base: core24
compression: lzo

# This requires snapcraft version including
# https://github.com/canonical/snapcraft/pull/5233

platforms:
  native:
    build-on: [amd64]
    build-for: [amd64]
  cross-arm:
    build-on: [amd64, armhf]
    build-for: [armhf]
  cross-arm64:
    build-on: [amd64, arm64]
    build-for: [arm64]

package-repositories:
  - type: apt
    architectures: [armhf, arm64]
    components: [main, multiverse, universe]
    suites: [noble, noble-updates, noble-security, noble-backports]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://ports.ubuntu.com/

assumes:
  - snapd2.54 # for mount-control

apps:
  firefox:
    command: firefox.launcher
    desktop: firefox.desktop
    extensions: [gnome]
    environment:
      # See below and also the 'snap/hooks/post-refresh' file for
      # more details about our hunspell setup.
      DICPATH: "$SNAP_COMMON/snap-hunspell"
      GTK_USE_PORTAL: 1
      HOME: "$SNAP_USER_COMMON"
      PIPEWIRE_CONFIG_NAME: "$SNAP/usr/share/pipewire/pipewire.conf"
      PIPEWIRE_MODULE_DIR: "$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/pipewire-0.3"
      SPA_PLUGIN_DIR: "$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/spa-0.2"
      SPEECHD_ADDRESS: "unix_socket:/run/user/$SNAP_UID/speech-dispatcher/speechd.sock"
      MOZ_DBUS_APP_NAME: "firefox_nightly"
      MOZ_APP_REMOTINGNAME: "firefox_firefox"
    slots:
      - dbus-daemon
      - mpris
    plugs:
      - alsa
      - audio-playback
      - audio-record
      - avahi-observe
      - browser-sandbox
      - camera
      - cups-control
      - gsettings
      - hardware-observe
      - home
      - host-hunspell
      - host-usr-share-hunspell
      - joystick
      - login-session-observe
      - network
      - network-observe
      - opengl
      - pcscd
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7
      - upower-observe
  geckodriver:
    command: usr/lib/firefox/geckodriver
    extensions: [gnome]
    plugs:
      - network-bind
      # + all the plugs required by firefox, so that when geckodriver
      # executes firefox it inherits the correct set of permissions
      - audio-playback
      - audio-record
      - avahi-observe
      - browser-sandbox
      - camera
      - cups-control
      - gsettings
      - hardware-observe
      - home
      - host-hunspell
      - host-usr-share-hunspell
      - joystick
      - login-session-observe
      - network
      - network-observe
      - opengl
      - pcscd
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7
      - upower-observe
    slots:
      - dbus-daemon
      - mpris

plugs:
  browser-sandbox:
    interface: browser-support
    allow-sandbox: true
  dot-mozilla-firefox:
    interface: personal-files
    read: [$HOME/.mozilla/firefox]
  etc-firefox:
    interface: system-files
    read: [/etc/firefox]
  host-hunspell:
    interface: mount-control
    mount:
    - what: /usr/share/hunspell
      where: $SNAP_COMMON/host-hunspell
      persistent: true
      options: [ro, bind, noatime, noexec]
  host-usr-share-hunspell:
    interface: system-files
    read:
    - /var/lib/snapd/hostfs/usr/share/hunspell

layout:
  /usr/share/alsa:
    bind: $SNAP/usr/share/alsa
  /usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/opensc-pkcs11.so:
    bind-file: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/opensc-pkcs11.so

parts:
  rust:
    plugin: nil
    build-packages:
      - wget
    override-pull: |
      # Do not use rustup to work around https://forum.snapcraft.io/t/armhf-builds-on-launchpad-timing-out/31008
      REQUIRED_RUST_VERSION=1.82.0
      ROOT=https://static.rust-lang.org/dist/rust-$REQUIRED_RUST_VERSION
      if [ $CRAFT_ARCH_BUILD_FOR = "amd64" ]; then
        BINARIES_SUFFIX=x86_64-unknown-linux-gnu
      elif [ $CRAFT_ARCH_BUILD_FOR = "armhf" ]; then
        BINARIES_SUFFIX=armv7-unknown-linux-gnueabihf
      elif [ $CRAFT_ARCH_BUILD_FOR = "arm64" ]; then
        BINARIES_SUFFIX=aarch64-unknown-linux-gnu
      fi
      wget -O - $ROOT-$BINARIES_SUFFIX.tar.gz | tar -x -z --strip-components=1
      ./install.sh --prefix=/usr --destdir=$CRAFT_STAGE
    override-prime: ''

  cbindgen:
    plugin: nil
    after:
      - rust
    override-build: |
      craftctl default
      $CRAFT_STAGE/usr/bin/cargo install cbindgen
    override-prime: ''

  clang:
    plugin: nil
    build-packages:
      - binutils-dev
      - cmake
      - libncurses-dev
      - make
      - wget
    build-environment:
      - LLVM_RELEASE: "17.0.6"
    override-pull: |
      ROOT=https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_RELEASE
      # Download the binaries
      # gnueabihf used to be tar.xz but at least 17.0.6 is not?
      BINARIES_BASENAME=clang+llvm-$LLVM_RELEASE
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        BINARIES_SUFFIX=x86_64-linux-gnu-ubuntu-22.04.tar.xz
      elif [ $CRAFT_ARCH_BUILD_ON = "armhf" ]; then
        BINARIES_SUFFIX=armv7a-linux-gnueabihf.tar.gz
      elif [ $CRAFT_ARCH_BUILD_ON = "arm64" ]; then
        BINARIES_SUFFIX=aarch64-linux-gnu.tar.xz
      fi
      case "$BINARIES_SUFFIX" in
        *gz) tar_flag="--gzip";;
        *xz) tar_flag="--xz";;
      esac
      wget -O - $ROOT/$BINARIES_BASENAME-$BINARIES_SUFFIX | tar -x "$tar_flag"
      # And cmake-$LLVM_RELEASE.src needed on LLVM >= 15.0.0
      wget -O - $ROOT/cmake-$LLVM_RELEASE.src.tar.xz | tar -x --xz
      mv cmake-$LLVM_RELEASE.src cmake
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        # And the sources to build LLVMgold.so, which isn't distributed in a binary form
        wget -O - $ROOT/llvm-$LLVM_RELEASE.src.tar.xz | tar -x --xz
      fi
    override-build: |
      craftctl default
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        cd llvm-$LLVM_RELEASE.src
        mkdir build
        cd build
        cmake -DLLVM_BINUTILS_INCDIR=/usr/include -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$CRAFT_PART_INSTALL/usr ..
        # TODO: use $CRAFT_PARALLEL_BUILD_COUNT again once https://github.com/canonical/snapcraft/issues/4785 is fixed
        make -j$(nproc) install-LLVMgold-stripped
      fi
    override-stage: |
      craftctl default
      mkdir -p usr
      cp -R $CRAFT_PART_SRC/clang+llvm-$LLVM_RELEASE-*/* usr/
    override-prime: ''

  dump-syms:
    plugin: nil
    after:
      - rust
    build-packages:
      - curl
      - git
      - jq
      - python3-yaml
    override-pull: |
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        ROOT=https://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central
        REVISION=$(wget -O - $ROOT/firefox-$(craftctl get version).en-US.linux-x86_64.txt | tail -1 | sed -n "s#^.*\/rev/\(.*\)\$#\1#p")
        FETCHES=https://hg.mozilla.org/mozilla-central/raw-file/${REVISION}/taskcluster/kinds/fetch/toolchains.yml
        TOOLCHAINS=$(curl -sSL "${FETCHES}")
        unset PYTHONPATH
        REPO=$(echo "${TOOLCHAINS}" | /usr/bin/python3 -c 'import yaml, sys; fetches = yaml.safe_load(sys.stdin); print("{}".format(fetches["dump-syms"]["fetch"]["repo"]))')
        SHA1=$(echo "${TOOLCHAINS}" | /usr/bin/python3 -c 'import yaml, sys; fetches = yaml.safe_load(sys.stdin); print("{}".format(fetches["dump-syms"]["fetch"]["revision"]))')
        git clone "${REPO}" . && git checkout "${SHA1}"
      fi
    override-build: |
      craftctl default
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        $CRAFT_STAGE/usr/bin/cargo build --release
        mkdir -p $CRAFT_STAGE/usr/bin/
        cp target/release/dump_syms $CRAFT_STAGE/usr/bin/
      fi

  # This is a temporary workaround to including the hunspell content
  # snap, which would cause breakage in the Ubuntu desktop image build
  # because of the Ubuntu policy.  See:
  # https://bugzilla.mozilla.org/show_bug.cgi?id=1792006
  #
  # The definition of this part is essentially a copy of the
  # corresponding part in hunspell-dictionaries-1-7-2004 by
  # Buo-ren, Lin.
  hunspell:
    plugin: nil
    override-build: |
      craftctl default
      set -eu
      apt download $(apt-cache search '^hunspell-.*$' |
        awk '!/myspell|dbgsym|tools|transitional|dependency/{printf "%s ", $1}')
      find . -name "*.deb" -exec dpkg-deb -x {} "$CRAFT_PART_INSTALL" \;
    prime:
      - usr/share/hunspell

  # We use the amd64 binary for all architectures since the used files are said
  # to be arch-independent.
  wasi-sdk:
    plugin: nil
    after:
      - clang
    build-packages:
      - wget
    build-environment:
      - WASI_BRANCH: "15"
      - WASI_RELEASE: "15.0"
    override-pull: |
      ROOT=https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-$WASI_BRANCH
      wget $ROOT/wasi-sysroot-$WASI_RELEASE.tar.gz
      wget $ROOT/libclang_rt.builtins-wasm32-wasi-$WASI_RELEASE.tar.gz
    override-build: |
      craftctl default
      tar -C $CRAFT_STAGE -xf wasi-sysroot-$WASI_RELEASE.tar.gz
      tar -C $CRAFT_STAGE/usr/lib/clang/* -xf libclang_rt.builtins-wasm32-wasi-$WASI_RELEASE.tar.gz
    override-prime: ''

  nodejs:
    plugin: nil
    build-packages:
      - wget
    build-environment:
      - NODEJS_RELEASE: "v18.12.1"
    override-pull: |
      ROOT=https://nodejs.org/dist/$NODEJS_RELEASE/node-$NODEJS_RELEASE-linux-
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        SUFFIX=x64.tar.xz
      elif [ $CRAFT_ARCH_BUILD_ON = "armhf" ]; then
        SUFFIX=armv7l.tar.xz
      elif [ $CRAFT_ARCH_BUILD_ON = "arm64" ]; then
        SUFFIX=arm64.tar.xz
      fi
      wget -O - $ROOT$SUFFIX | tar -x --xz
    override-build: |
      craftctl default
      cp -R node-$NODEJS_RELEASE-linux-*/ $CRAFT_PART_INSTALL/usr/
    override-prime: ''

  mozconfig:
    plugin: nil
    # This should be 'pull' step so that firefox.pull step can add more
    # configure flags to mozconfig ; if it's stage then firefox.pull will put
    # content that we will overwrite here
    override-pull: |
      cp $CRAFT_PROJECT_DIR/mozconfig.in $CRAFT_STAGE/mozconfig
    override-prime: ''

  # Launchpad builders have a timeout for how long they are allowed to access
  # the internet (through a proxy) starting from the start of the build.
  # Since the firefox part takes a long time to build, we need to ensure
  # that all other parts that need to access the internet (to e.g. fetch build
  # or stage packages) are built before it (before the proxy authentication is
  # revoked).
  firefox:
    plugin: nil
    after:
      - apikeys
      - cbindgen
      - clang
      - distribution
      - dump-syms
      - ffmpeg
      - firefox-langpacks
      - hunspell
      - mozconfig
      - nodejs
      - rust
      - wasi-sdk
    build-packages:
      - on amd64:
        - to amd64:
          - libasound2-dev
          - libdbus-glib-1-dev
          - libgtk-3-dev
          - libgtk2.0-dev
          - libpango1.0-dev
          - libpulse-dev
          - libpython3-dev
          - libx11-xcb-dev
          - libxkbcommon-dev
          - libxt-dev
        - to arm64:
          - libstdc++-11-dev-arm64-cross
          - libasound2-dev:arm64
          - libdbus-glib-1-dev:arm64
          - libgtk2.0-dev:arm64
          - libgtk-3-dev:arm64
          - libpango1.0-dev:arm64
          - libpulse-dev:arm64
          - libpython3-dev:arm64
          - libx11-xcb-dev:arm64
          - libxkbcommon-dev:arm64
          - libxt-dev:arm64
        - to armhf:
          - libstdc++-11-dev-armhf-cross
          - libasound2-dev:armhf
          - libdbus-glib-1-dev:armhf
          - libgtk2.0-dev:armhf
          - libgtk-3-dev:armhf
          - libpango1.0-dev:armhf
          - libpulse-dev:armhf
          - libpython3-dev:armhf
          - libx11-xcb-dev:armhf
          - libxkbcommon-dev:armhf
          - libxt-dev:armhf
      - else:
        - libasound2-dev
        - libdbus-glib-1-dev
        - libgtk2.0-dev
        - libgtk-3-dev
        - libpango1.0-dev
        - libpulse-dev
        - libpython3-dev
        - libx11-xcb-dev
        - libxkbcommon-dev
        - libxt-dev
      - cmake
      - coreutils
      - file
      - git
      - m4
      - make
      - mercurial
      - nasm
      - quilt
      - sed
      - unzip
      - wget
      - xvfb
      - zip
    override-pull: |
      rm -rf $CRAFT_PART_SRC/*
      REPO=https://hg.mozilla.org/mozilla-central
      ROOT=https://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central
      REVISION=$(wget -O - $ROOT/firefox-$(craftctl get version).en-US.linux-x86_64.txt | tail -1 | sed -n "s#^$REPO/rev/\(.*\)\$#\1#p")
      hg clone --stream $REPO -u $REVISION .
      rm -rf .hg
      mkdir -p $CRAFT_STAGE/debug-symbols
      cp toolkit/crashreporter/tools/upload_symbols.py $CRAFT_STAGE/debug-symbols/
      # Apply patches before the build, so a failed build can be
      # easily rerun.
      QUILT_PATCHES=$CRAFT_PROJECT_DIR/patches quilt push -a
      BUILD_DBGSYMS=false
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        # TODO: Update above comment?
        # Build and publish debug symbols for amd64 and arm64 only,
        # because Launchpad builders for armhf choke (OOM) when
        # building with debug symbols enabled, even with
        # patches/mozilla-reduce-rust-debuginfo.patch applied,
        # at least as of 2023-06-25.
        BUILD_DBGSYMS=true
      fi
      # GitHub Actions is limited to 2 CPUs and 7GB RAM, and
      # too much debug info from Rust will make gkrust linkage fail.
      # Same goes for arm64 builds on Launchpad.  It seems we can't
      # detect $GITHUB_WORKSPACE, so we assume presence of the file
      # "symbols-upload-token" means we are running on GitHub.
      if [ $CRAFT_ARCH_BUILD_ON = "armhf" || $CRAFT_ARCH_BUILD_ON = "arm64" ]; then
        patch -p1 < $CRAFT_PROJECT_DIR/patches/mozilla-reduce-rust-debuginfo.patch
        patch -p1 < $CRAFT_PROJECT_DIR/patches/armhf-thin-lto.patch
      fi
      export MOZCONFIG="$CRAFT_STAGE/mozconfig"
      echo "export MOZ_SOURCE_REPO=${REPO}" >> $MOZCONFIG
      echo "export MOZ_SOURCE_CHANGESET=${REVISION}" >> $MOZCONFIG
      if [ $BUILD_DBGSYMS = "true" ]; then
        echo "ac_add_options --enable-debug-symbols" >> $MOZCONFIG
      else
        echo "ac_add_options --disable-debug-symbols" >> $MOZCONFIG
      fi
      if [ $CRAFT_ARCH_BUILD_FOR = "amd64" ]; then
        # Enable LTO and PGO (https://firefox-source-docs.mozilla.org/build/buildsystem/pgo.html) only on amd64 for now.
        # Linking with gold fails on armhf (error: undefined reference to '__aeabi_uldivmod') and would need to be
        # investigated further, and running PGO on arm64 takes forever (> 4 days in the Launchpad build environment!).
        echo "ac_add_options --enable-linker=lld" >> $MOZCONFIG
        echo "ac_add_options MOZ_PGO=1" >> $MOZCONFIG
      fi
      # TODO: Revisit?
      if [ $CRAFT_ARCH_BUILD_ON != "armhf" ]; then
        echo "ac_add_options --enable-rust-simd" >> $MOZCONFIG
      fi
      echo "ac_add_options --prefix=$CRAFT_PART_INSTALL/usr" >> $MOZCONFIG
      if [ $CRAFT_ARCH_BUILD_ON != $CRAFT_ARCH_BUILD_FOR ]; then
        if [ $CRAFT_ARCH_BUILD_FOR = "arm64" ]; then
          echo "ac_add_options --target=aarch64-linux-gnu" >> $MOZCONFIG
          echo "ac_add_options --enable-linker=lld" >> $MOZCONFIG
        fi
        if [ $CRAFT_ARCH_BUILD_FOR = "armhf" ]; then
          echo "ac_add_options --target=arm-linux-gnueabihf" >> $MOZCONFIG
          echo "ac_add_options --with-thumb=yes" >> $MOZCONFIG
          echo "ac_add_options --with-arch=armv7" >> $MOZCONFIG
          echo "ac_add_options --with-fpu=neon" >> $MOZCONFIG
          echo "ac_add_options --enable-linker=lld" >> $MOZCONFIG
        fi
      fi
    override-build: |
      craftctl default
      export PATH=$CRAFT_STAGE/usr/bin/:$PATH
      GNOME_SDK_SNAP_BASE=gnome-46-2404-sdk
      GNOME_SDK_SNAP_REVISION=current
      GNOME_SDK_SNAP=/snap/$GNOME_SDK_SNAP_BASE/$GNOME_SDK_SNAP_REVISION
      if [ $CRAFT_ARCH_BUILD_FOR = "amd64" ]; then
        # "clang -dumpmachine" returns "x86_64-unknown-linux-gnu" on
        # amd64 (at least the binaries they distribute), but what we
        # really need is "x86_64-pc-linux-gnu"; so let's hard-code it.
        export TARGET_TRIPLET="x86_64-pc-linux-gnu"
      elif [ $CRAFT_ARCH_BUILD_FOR = "arm64" ]; then
        export TARGET_TRIPLET="aarch64-unknown-linux-gnu"
      elif [ $CRAFT_ARCH_BUILD_FOR = "armhf" ]; then
        export TARGET_TRIPLET="arm-linux-gnueabihf"
      fi
      export LDFLAGS="-Wl,-rpath-link=$GNOME_SDK_SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR -Wl,-rpath-link=$GNOME_SDK_SNAP/usr/lib -Wl,-rpath-link=/usr/$CRAFT_ARCH_TRIPLET_BUILD_FOR/lib/"
      export LDFLAGS="-Wl,-rpath-link=$CRAFT_PART_BUILD/obj-$TARGET_TRIPLET/dist/bin${LDFLAGS:+ $LDFLAGS}"
      export LD_LIBRARY_PATH="$CRAFT_PART_BUILD/obj-$TARGET_TRIPLET/dist/bin${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
      export PKG_CONFIG_PATH=$GNOME_SDK_SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/pkgconfig/:$GNOME_SDK_SNAP/usr/lib/pkgconfig/:$GNOME_SDK_SNAP/usr/share/pkgconfig/:/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/pkgconfig/
      export WASI_SYSROOT=$CRAFT_STAGE/wasi-sysroot
      export MOZBUILD_STATE_PATH=$CRAFT_PART_BUILD/.mozbuild
      export MOZCONFIG="$CRAFT_STAGE/mozconfig"
      BUILD_DBGSYMS=false
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        # See override-pull above for why we only build debug symbols
        # on these arches.
        BUILD_DBGSYMS=true
      fi
      unset PYTHONPATH
      if [ $CRAFT_ARCH_BUILD_FOR = "amd64" ]; then
        # Needed for PGO-enabled builds that execute the built binaries. This should mirror the link paths in $LDFLAGS.
        export LD_LIBRARY_PATH="$GNOME_SDK_SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$GNOME_SDK_SNAP/usr/lib"
        # Ensure the instrumented binary is run against the right version of libssl3.so and libnss3.so
        # (locally-built versions are more recent than the ones in the gnome platform snap)
        export LD_LIBRARY_PATH="$CRAFT_PART_BUILD/obj-$TARGET_TRIPLET/instrumented/dist/bin${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
      fi
      MACH="/usr/bin/python3 ./mach"
      $MACH repackage desktop-file --output $CRAFT_PART_INSTALL/firefox.desktop --flavor snap --release-product "firefox" --release-type nightly
      if [ $CRAFT_ARCH_BUILD_ON = "amd64" ]; then
        # xvfb is only needed when doing a PGO-enabled build
        # TODO: use $CRAFT_PARALLEL_BUILD_COUNT again once https://github.com/canonical/snapcraft/issues/4785 is fixed
        xvfb-run '--server-args=-screen 0 1920x1080x24' $MACH build --verbose -j$(nproc)
      else
        # TODO: use $CRAFT_PARALLEL_BUILD_COUNT again once https://github.com/canonical/snapcraft/issues/4785 is fixed
        $MACH build --verbose -j$(nproc)
      fi
      find . -name 'dep-graph.bin' -delete
      find . -name 'query-cache.bin' -delete
      find . -name 'work-products.bin' -delete
      if [ $BUILD_DBGSYMS = "true" ]; then
        DUMP_SYMS=$CRAFT_STAGE/usr/bin/dump_syms $MACH buildsymbols
      fi
      $MACH install
      cp obj-*/dist/host/bin/geckodriver $CRAFT_PART_INSTALL/usr/lib/firefox/
      DISTRIBUTION=$CRAFT_PART_INSTALL/usr/lib/firefox/distribution
      mkdir -p $DISTRIBUTION/extensions
      cp browser/branding/nightly/default256.png $CRAFT_PART_INSTALL/
      if [ $BUILD_DBGSYMS = "true" ]; then
        cp obj-*/dist/firefox-*.crashreporter-symbols.zip $CRAFT_STAGE/debug-symbols/
      fi
      # update the path to the vulkan drivers for the snap environment
      sed -i 's#/usr/lib/#/snap/firefox/current/usr/lib/#' $CRAFT_PART_INSTALL/usr/share/vulkan/icd.d/*.json
    override-stage: |
      # Workaround for LP: #2016358: create mount points for the gnome
      # content interface, while a proper fix is implemented in snapd.
      # Thanks to James Henstridge.
      mkdir $CRAFT_PART_INSTALL/{gnome-platform,data-dir,data-dir/{icons,sounds,themes}}
      craftctl default
    stage-packages:
      - on amd64:
        - to amd64:
          - libasound2t64
          - libcurl4t64
          - libpci3
          - libpipewire-0.3-0t64
          - libpipewire-0.3-modules
          - libspa-0.2-modules
          - libspeechd2
          - libvulkan1
          - libxt6t64
          - mesa-vulkan-drivers
          - opensc-pkcs11
        - to arm64:
          - libasound2t64:arm64
          - libcurl4t64:arm64
          - libpci3:arm64
          - libpipewire-0.3-0t64:arm64
          - libpipewire-0.3-modules:arm64
          - libspa-0.2-modules:arm64
          - libspeechd2:arm64
          - libvulkan1:arm64
          - libxt6t64:arm64
          - mesa-vulkan-drivers:arm64
          - opensc-pkcs11:arm64
        - to armhf:
          - libasound2t64:armhf
          - libcurl4t64:armhf
          - libpci3:armhf
          - libpipewire-0.3-0t64:armhf
          - libpipewire-0.3-modules:armhf
          - libspa-0.2-modules:armhf
          - libspeechd2:armhf
          - libvulkan1:armhf
          - libxt6t64:armhf
          - mesa-vulkan-drivers:armhf
          - opensc-pkcs11:armhf
      - else:
        - libasound2t64
        - libcurl4t64
        - libpci3
        - libpipewire-0.3-0t64
        - libpipewire-0.3-modules
        - libspa-0.2-modules
        - libspeechd2
        - libvulkan1
        - libxt6t64
        - mesa-vulkan-drivers
        - opensc-pkcs11
      - pipewire-bin
      - pipewire-pulse
    prime:
      - default256.png
      - firefox.desktop
      - usr/lib/firefox
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/opensc-pkcs11.so
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/pkcs11/opensc-pkcs11.so
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libasn1.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libcurl.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libgssapi.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libhcrypto.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libheimbase.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libheimntlm.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libhogweed.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libhx509.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libkrb5.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/liblber-2.4.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libldap_r-2.4.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libnettle.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libnghttp2.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libpci.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libpipewire*.so*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libroken.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/librtmp.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libsasl2.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libspeechd.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libssh.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libssl.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libvulkan*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libVkLayer*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libwind.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libXt.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/pipewire-*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/spa-*
      - usr/share/alsa
      - usr/share/pipewire
      - usr/share/vulkan
      # Workaround for LP: #2016358 (see the 'override-stage' above).
      - gnome-platform
      - data-dir/icons
      - data-dir/sounds
      - data-dir/themes

  firefox-langpacks:
    plugin: nil
    build-packages:
      - coreutils
      - sed
      - wget
    override-pull: |
      VERSION=$(craftctl get version)
      SERVER=https://ftp.mozilla.org
      ROOT=$SERVER/pub/firefox/nightly/latest-mozilla-central-l10n/linux-x86_64/xpi/
      XPIS=$(wget -O - $ROOT | sed -n "s/.* href=\"\(.*$VERSION.*\.xpi\)\".*/\1/p")
      for XPI in $XPIS; do
        wget $SERVER$XPI
      done
    override-prime: |
      INSTALLDIR=$CRAFT_PRIME/usr/lib/firefox/distribution/extensions
      mkdir -p $INSTALLDIR
      for XPI in $(ls $CRAFT_PART_SRC/*.xpi); do
        LANGCODE=$(basename $XPI .langpack.xpi | sed -r 's/.*\.(.*)/\1/')
        mkdir $INSTALLDIR/locale-$LANGCODE
        cp $XPI $INSTALLDIR/locale-$LANGCODE/langpack-$LANGCODE@firefox.mozilla.org.xpi
      done

  launcher:
    plugin: nil
    override-prime: |
      cp "$CRAFT_PROJECT_DIR/firefox.launcher" "$CRAFT_PRIME/"
      cp "$CRAFT_PROJECT_DIR/patch-default-profile.py" "$CRAFT_PRIME/"

  distribution:
    plugin: nil
    source: https://github.com/mozilla-partners/canonical.git
    override-prime: |
      mkdir -p $CRAFT_PRIME/usr/lib/firefox
      cp -R $CRAFT_PART_SRC/desktop/ubuntu/distribution $CRAFT_PRIME/usr/lib/firefox/

  ffmpeg:
    plugin: nil
    # Not using the ffmpeg snap (which might provide a more recent version)
    # because it is currently built on core18
    stage-packages:
      - on amd64:
        - to amd64:
          - libavcodec60
          - libhwy1t64
          - libsvtav1enc1d1
          - libjxl0.7
          - librav1e0
          - libvpl2 # the package is intel specific
        - to arm64:
          - libavcodec60:arm64
          - libhwy1t64:arm64
          - libsvtav1enc1d1:arm64
          - libjxl0.7:arm64
          - librav1e0:arm64
        - to armhf:
          - libavcodec60:armhf
          - libhwy1t64:armhf
          - libsvtav1enc1d1:armhf
          - libjxl0.7:armhf
          - librav1e0:armhf
      - else:
        - libavcodec60
        - libhwy1t64
        - libsvtav1enc1d1
        - libjxl0.7
        - librav1e0
    prime:
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libaom.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libavcodec.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libavutil.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libcodec2.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libdav1d.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libgsm.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libmd.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libmfx.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libmp3lame.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libnuma.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libOpenCL.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libopus.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libshine.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libsnappy.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libsoxr.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libspeex.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libswresample.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libtheoradec.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libtheoraenc.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libtwolame.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libvdpau.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libvpx.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libwavpack.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libwebpmux.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libwebp.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libx264.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libx265.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libxvidcore.so.*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libzvbi.so.*
      # the package is intel specific
      - on amd64:
        - to amd64:
          - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/libvpl.so.*

  apikeys:
    plugin: nil
    after:
      - mozconfig
    build-packages:
      - coreutils
      - gpg
      - jq
    override-build: |
      craftctl default
      MOZCONFIG="$CRAFT_STAGE/mozconfig"
      gpg -d --batch --passphrase "$(base64 -d $CRAFT_PROJECT_DIR/.passphrase)" -o apikeys $CRAFT_PROJECT_DIR/.apikeys
      cat apikeys | jq .MOZ_GOOGLE_LOCATION_SERVICE_API_KEY | tr -d '"' > $CRAFT_PART_INSTALL/gls-gapi.data
      echo "ac_add_options --with-google-location-service-api-keyfile=$CRAFT_STAGE/gls-gapi.data" >> $MOZCONFIG
      cat apikeys | jq .MOZ_GOOGLE_SAFEBROWSING_API_KEY | tr -d '"' > $CRAFT_PART_INSTALL/sb-gapi.data
      echo "ac_add_options --with-google-safebrowsing-api-keyfile=$CRAFT_STAGE/sb-gapi.data" >> $MOZCONFIG
    override-prime: ''

  debug-symbols:
    plugin: nil
    build-packages:
      - python3
      - python3-virtualenv
    after:
      - firefox
    override-build: |
      export SYMBOLS_ARCHIVE=$(find $CRAFT_STAGE/debug-symbols/ -type f -name "firefox-*.crashreporter-symbols.zip")
      if [ -f "$SYMBOLS_ARCHIVE" ]; then
        if [ -f "$CRAFT_PROJECT_DIR/symbols-upload-token" ]; then
          virtualenv venv/
          source venv/bin/activate
          venv/bin/pip3 install redo requests argparse
          SOCORRO_SYMBOL_UPLOAD_URL=https://symbols.mozilla.org/upload/ SOCORRO_SYMBOL_UPLOAD_TOKEN_FILE="$CRAFT_PROJECT_DIR/symbols-upload-token" venv/bin/python3 $CRAFT_STAGE/debug-symbols/upload_symbols.py $SYMBOLS_ARCHIVE
          rm "$CRAFT_PROJECT_DIR/symbols-upload-token"
          deactivate
        else
          cp $SYMBOLS_ARCHIVE $CRAFT_PROJECT_DIR/$CRAFT_PROJECT_NAME_$(craftctl get version)_$CRAFT_ARCH_BUILD_FOR.debug
        fi
      fi

slots:
  dbus-daemon:
    interface: dbus
    bus: session
    name: org.mozilla.firefox_nightly

hooks:
  post-refresh:
    plugs: [host-usr-share-hunspell]
